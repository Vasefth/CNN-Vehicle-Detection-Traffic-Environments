# -*- coding: utf-8 -*-
"""YOLOv8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_0iC1LclZJBEj9euYV93eEP84Pn-aAL
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

!pip install -U ipywidgets
!pip install ultralytics

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os

from matplotlib import pyplot as plt
from PIL import Image

import torch
from torch import nn

import yaml

import shutil


from ultralytics import YOLO
# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

print("All libraries have been imported", end='\r')

"""## 1. Load the YOLOV8 small model

We're going to use the code version of YOLOV8.
"""

model = YOLO('yolov8s.pt')

"""### Create an easier version (yaml) to start working with the YOLO model directly!

This portion of the following code was taken from [this notebook](https://www.kaggle.com/code/trytobebetter/yolov8/notebook)
"""

from google.colab import drive
drive.mount('/content/drive')

# define the train, and test paths
train_data ="/content/drive/My Drive/data/training_images"
csv_data = "/content/drive/My Drive/data/train_solution_bounding_boxes (1).csv"

test_data ="/content/drive/My Drive/data/testing_images"

# create directiories in the kaggle output to split into train, val, and yolo format labels
!mkdir -p "/content/drive/My Drive/working/data"

!mkdir -p "/content/drive/My Drive/working/data/images"

!mkdir -p "/content/drive/My Drive/working/data/images/train"
!mkdir -p "/content/drive/My Drive/working/data/images/val"

!mkdir -p "/content/drive/My Drive/working/data/labels"

!mkdir -p "/content/drive/My Drive/working/data/labels/train"
!mkdir -p "/content/drive/My Drive/working/data/labels/val"

root_dir="/content/drive/My Drive/working/data"
labels_dir="/content/drive/My Drive/working/data/labels"
images_dir="/content/drive/My Drive/working/data/images"

df=pd.read_csv(csv_data)

width=676
height=380

df["class"]=0
df.rename(columns={'image':'img_name'}, inplace=True)

df["x_centre"]=(df["xmin"]+df["xmax"])/2
df["y_centre"]=(df["ymin"]+df["ymax"])/2
df["width"]=(df["xmax"]-df["xmin"])
df["height"]=(df["ymax"]-df["ymin"])

# normalize the bounding box coordinates
df["x_centre"]=df["x_centre"]/width
df["y_centre"]=df["y_centre"]/height
df["width"]=df["width"]/width
df["height"]=df["height"]/height

df_yolo=df[["img_name","class","x_centre","y_centre","width","height"]]
df_yolo.head()

img_list = list(sorted(os.listdir(train_data)))
np.random.shuffle(img_list)

for i, img_name in enumerate(img_list):
    subset = "train"
    if i >= 80/100 * len(img_list):
        subset = "val"


    if np.isin(img_name, df_yolo['img_name']):
        columns = ["class", "x_centre", "y_centre", "width", "height"]
        img_box = df[df['img_name'] == img_name][columns].values
        label_path = os.path.join(labels_dir,subset, img_name[:-4] + ".txt")
        with open(label_path, "w+") as f:
            for row in img_box:
                text = " ".join(row.astype(str))
                f.write(text)
                f.write("\n")

    old_image_path = os.path.join(train_data, img_name)
    new_image_path = os.path.join(images_dir, subset, img_name)
    shutil.copy(old_image_path, new_image_path)

yolo_format=dict(path="/content/drive/My Drive/working/data",
                 train="/content/drive/My Drive/working/data/images/train",
                 val="/content/drive/My Drive/working/data/images/val",
                 nc=1,
                 names={0:"car"})

with open('/content/drive/My Drive/working/data.yaml', 'w') as outfile:
    yaml.dump(yolo_format, outfile, default_flow_style=False)

"""## 2. Train the model

NOTE: To start training the model you need an access token from [Weights & Biases](https://wandb.ai/).

There's a created version of the dataset yaml file with the input of this notebook.
"""

results = model.train(data='/content/drive/My Drive/working/data.yaml', epochs=100, imgsz=640)

metrics = model.val()

"""---

## 3. Plotting the curves

### Training curves

The curves we want to plot are saved in the `/kaggle/working/runs/detect/train/` directory.
"""

list_of_metrics = ["P_curve.png","R_curve.png","confusion_matrix.png", "F1_curve.png", "results.png"]

for i in list_of_metrics:

    image = Image.open(f'/content/drive/My Drive/working/runs/detect/train/{i}')

    plt.figure(figsize=(12, 8))
    plt.axis("off")
    plt.imshow(image)
    plt.show()

"""### Evaluation curves"""

list_of_eval_metrics = list_of_metrics[:-1]

for i in list_of_eval_metrics:

    image = Image.open(f'/content/drive/My Drive/working/runs/detect/train2/{i}')

    plt.figure(figsize=(12, 8))
    plt.axis("off")
    plt.imshow(image)
    plt.show()

"""## 4. Testing the model

Time to test our model on the test set. Let's create pipelines to ease our code.
"""

def detection_pipline(images):
    output = model(images)

    # Visualize the results
    for i, r in enumerate(output):
        # Plot results image
        im_bgr = r.plot()  # BGR-order numpy array
        im_rgb = Image.fromarray(im_bgr[..., ::-1])  # RGB-order PIL image

        plt.axis('off')
        plt.imshow(im_rgb)
        plt.show()

test_imgs = [
    "/content/drive/My Drive/input/car-object-detection/data/training_images/vid_4_13800.jpg",
    "/content/drive/My Drive/input/car-object-detection/data/testing_images/vid_5_26740.jpg",
    "/content/drive/My Drive/input/car-object-detection/data/testing_images/vid_5_400.jpg",
    "/content/drive/My Drive/input/car-object-detection/data/training_images/vid_4_13800.jpg",
    "/content/drive/My Drive/input/car-object-detection/data/training_images/vid_4_12480.jpg",
    "/content/drive/My Drive/input/car-object-detection/data/training_images/vid_4_1960.jpg"
]

detection_pipline(test_imgs)

